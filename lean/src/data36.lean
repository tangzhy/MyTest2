
import category_theory.natural_transformation
import category_theory.functor_category
import category_theory.functor

open category_theory
open category_theory.functor

lemma nat_trans_const_functor (X : D) (F : C ‚•§ D) :
  (const C).obj X ‚üπ F ‚âÖ F.obj :=
{ hom := Œª Œ±, Œ±.app (ùüô _),
  inv := Œª Y, { app := Œª j, F.map j.1 ‚â´ Y },
  hom_inv_id' := by { ext, dsimp, simp },
  inv_hom_id' := by { ext, dsimp, simp } }
